
Tarea2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010d4  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000904  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a7  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000776  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Enable TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with acknowledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
}

/* set cursor on specified column&row	*/
void lcd_i2c_col_row(uint8_t x, uint8_t y)
{
	lcd_i2c_cmd(0x80 + Columna_1[y-1]+(x-1));
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	8e e4       	ldi	r24, 0x4E	; 78
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_i2c_reset+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_i2c_reset+0x1a>
  fa:	00 00       	nop
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_i2c_reset+0x2c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_i2c_reset+0x32>
 112:	00 00       	nop
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_i2c_reset+0x44>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_i2c_reset+0x4a>
 12a:	00 00       	nop
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_i2c_reset+0x5c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_i2c_reset+0x62>
 142:	00 00       	nop
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_i2c_reset+0x74>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_i2c_reset+0x7a>
 15a:	00 00       	nop
 15c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 160:	08 95       	ret

00000162 <lcd_i2c_cmd>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	c8 2f       	mov	r28, r24
 168:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 172:	dc 2f       	mov	r29, r28
 174:	d0 7f       	andi	r29, 0xF0	; 240
 176:	8d 2f       	mov	r24, r29
 178:	8c 60       	ori	r24, 0x0C	; 12
 17a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 17e:	8d 2f       	mov	r24, r29
 180:	88 60       	ori	r24, 0x08	; 8
 182:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	c8 9f       	mul	r28, r24
 18a:	e0 01       	movw	r28, r0
 18c:	11 24       	eor	r1, r1
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_i2c_cmd+0x42>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_i2c_cmd+0x48>
 1aa:	00 00       	nop
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_i2c_cmd+0x4e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_i2c_cmd+0x54>
 1b6:	00 00       	nop
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_i2c_init>:
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1de:	08 95       	ret

000001e0 <lcd_i2c_data>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	c8 2f       	mov	r28, r24
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1ea:	8e e4       	ldi	r24, 0x4E	; 78
 1ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1f0:	dc 2f       	mov	r29, r28
 1f2:	d0 7f       	andi	r29, 0xF0	; 240
 1f4:	8d 2f       	mov	r24, r29
 1f6:	8d 60       	ori	r24, 0x0D	; 13
 1f8:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1fc:	8d 2f       	mov	r24, r29
 1fe:	89 60       	ori	r24, 0x09	; 9
 200:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 204:	20 e1       	ldi	r18, 0x10	; 16
 206:	c2 9f       	mul	r28, r18
 208:	e0 01       	movw	r28, r0
 20a:	11 24       	eor	r1, r1
 20c:	8c 2f       	mov	r24, r28
 20e:	8d 60       	ori	r24, 0x0D	; 13
 210:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 214:	8c 2f       	mov	r24, r28
 216:	89 60       	ori	r24, 0x09	; 9
 218:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 21c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 220:	8f e6       	ldi	r24, 0x6F	; 111
 222:	91 e1       	ldi	r25, 0x11	; 17
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	81 50       	subi	r24, 0x01	; 1
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <lcd_i2c_data+0x46>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_i2c_data+0x50>
 230:	00 00       	nop
 232:	8f e6       	ldi	r24, 0x6F	; 111
 234:	91 e1       	ldi	r25, 0x11	; 17
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <lcd_i2c_data+0x58>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_i2c_data+0x62>
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <lcd_i2c_clr>:
}

/*	clear screen	*/
void lcd_i2c_clr(void)
{
	lcd_i2c_cmd(0x01); //clear LCD (0000 0001)
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 250:	89 ef       	ldi	r24, 0xF9	; 249
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_i2c_clr+0xa>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_i2c_clr+0x10>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <lcd_i2c_write_string>:
	_delay_ms(1);
}

/*	write character string	*/
void lcd_i2c_write_string(char *a)
{
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 26e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_i2c_data>

/*	write character string	*/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <main>:
#include "lcd_i2c.h"

int main(void)
{
    /* Replace with your application code */
	init_ports();
 28a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_ports>
	init_i2c();
 28e:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 292:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_i2c_init>
	lcd_i2c_clr();
 296:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	lcd_i2c_write_string(" Padre nuestro tu                        que estas,en los ");
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_write_string>
	lcd_i2c_clr();
 2a2:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	lcd_i2c_write_string(" que aman hoy la                         paz y del reino  ");
 2a6:	8b e3       	ldi	r24, 0x3B	; 59
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_write_string>
	lcd_i2c_clr();
 2ae:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	lcd_i2c_write_string(" dios bajo y dejo                         su corazon");
 2b2:	86 e7       	ldi	r24, 0x76	; 118
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_write_string>
	lcd_i2c_clr();
 2ba:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_clr>
	lcd_i2c_write_string(" ---------------------------------------------------");
 2be:	8b ea       	ldi	r24, 0xAB	; 171
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_write_string>
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <main+0x3c>

000002c8 <init_ports>:
PB3	|	D4
PB4	|	D5
PD2	|	D6
PD3	|	D7
*/	
	DDRB = 0xFF;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	8c 60       	ori	r24, 0x0C	; 12
 2d0:	8a b9       	out	0x0a, r24	; 10
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
